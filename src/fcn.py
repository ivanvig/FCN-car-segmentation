'''
Architecture based on: Fully Convolutional Networks for Semantic Segmentation
https://people.eecs.berkeley.edu/~jonlong/long_shelhamer_fcn.pdf

Code based on: Tensorflow's Convoltional Neural Networks tutorial
https://www.tensorflow.org/tutorials/deep_cnn
'''

import tensorflow as tf

FLAGS = tf.app.flags.FLAGS

# Basic model parameters.
tf.app.flags.DEFINE_integer('batch_size', 8,
                            """Number of images to process in a batch.""")

tf.app.flags.DEFINE_string('data_dir', '../data/ig02-cars/cars/',
"""Path to the ig02 data directory.""")

tf.app.flags.DEFINE_string('train_files', '../data/ig02-cars/cars_train.txt',
"""Path to the ig02 training list file.""")

tf.app.flags.DEFINE_string('eval_files', '../data/ig02-cars/cars_eval.txt',
"""Path to the ig02 evalution list file.""")

NUM_CLASSES = 2
NUM_EXAMPLES_PER_EPOCH_FOR_TRAIN = 374
NUM_EXAMPLES_PER_EPOCH_FOR_EVAL = 46
MOVING_AVERAGE_DECAY = 0.9999

def _create_weights(name, shape, stddev, wd=None):
    """Creates a weight tensor

    Args:
      name: variable name
      shape: tensor shape
      stddev: standart deviation of the normal distribution
      wd: weight decay factor, if None no weight decay is applied

    Returns:
      A tensor with values generated by a truncated normal with custom stddev
    """
    var = tf.Variable(
        tf.truncated_normal(shape=shape, stddev=stddev, name=name)
    )
    if wd is not None:
        weight_decay = tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')
        tf.add_to_collection('losses', weight_decay)
    return var

def _create_bias(name, shape):
    """Creates a bias tensor

    Args:
      name: variable name
      shape: tensor shape

    Returns:
      A tensor filled with zeros
    """
    return tf.Variable(
        tf.constant(value=0.0, shape=shape, dtype=tf.float32),
        name=name
    )

def inference(images):
    """FCN model building.

    Args:
      images: Input images

    Returns:
      Logits.
    """

    # Nota:
    # Se podria reducir la arquitectura sin afectar notoriamente los resultados

    # conv1
    with tf.variable_scope('conv1') as scope:
        kernel = _create_weights(
            'weights',
            shape=[5, 5, 1, 4],
            stddev=2./25,
            wd=None
        )
        conv = tf.nn.conv2d(images, kernel, [1,1,1,1], padding='SAME')
        biases = _create_bias('biases', [4])
        pre_activation = tf.nn.bias_add(conv, biases)
        conv1 = tf.nn.relu(pre_activation, name=scope.name)
        # TODO: summary

    pool1 = tf.nn.max_pool(
        conv1,
        ksize=[1,2,2,1],
        strides=[1,2,2,1],
        padding='SAME',
        name='pool1'
    )

    # norm1
    #norm1 = tf.nn.lrn(pool1, 4, bias=2.0, alpha=0.001 / 9.0, beta=0.75,
    #    name='norm1')

    # conv2
    with tf.variable_scope('conv2') as scope:
        kernel = _create_weights(
            'weights',
            shape=[5,5,4,8],
            stddev=2./(25*4),
            wd=None
        )
        conv = tf.nn.conv2d(pool1, kernel, [1,1,1,1], padding='SAME')
        biases = _create_bias('biases', [8])
        pre_activation = tf.nn.bias_add(conv, biases)
        conv2 = tf.nn.relu(pre_activation, name=scope.name)
        # TODO: summary

    pool2 = tf.nn.max_pool(
        conv2,
        ksize=[1,2,2,1],
        strides=[1,2,2,1],
        padding='SAME',
        name='pool2'
    )

    # conv3
    with tf.variable_scope('conv3') as scope:
        kernel = _create_weights(
            'weights',
            shape=[5,5,8,8],
            stddev=2./(25*8),
            wd=None
        )
        conv = tf.nn.conv2d(pool2, kernel, [1,1,1,1], padding='SAME')
        biases = _create_bias('biases', [8])
        pre_activation = tf.nn.bias_add(conv, biases)
        conv3 = tf.nn.relu(pre_activation, name=scope.name)
        # TODO: summary

    pool3 = tf.nn.max_pool(
        conv3,
        ksize=[1,2,2,1],
        strides=[1,2,2,1],
        padding='SAME',
        name='pool3'
    )

    # conv4
    with tf.variable_scope('conv4') as scope:
        kernel = _create_weights(
            'weights',
            shape=[5,5,8,16],
            stddev=2./(25*8),
            wd=None
        )
        conv = tf.nn.conv2d(pool3, kernel, [1,1,1,1], padding='SAME')
        biases = _create_bias('biases', [16])
        pre_activation = tf.nn.bias_add(conv, biases)
        conv4 = tf.nn.relu(pre_activation, name=scope.name)
        # TODO: summary

    pool_out = tf.nn.max_pool(
        conv4,
        ksize=[1,2,2,1],
        strides=[1,2,2,1],
        padding='SAME',
        name='pool_out'
    )

    # replacing fully connecteds

    # conv1_1
    with tf.variable_scope('conv1_1') as scope:
        kernel = _create_weights(
            'weights',
            shape=[1,1,16,32],
            stddev=2./16,
            wd=0.004
        )
        conv = tf.nn.conv2d(pool_out, kernel, [1,1,1,1], padding='SAME')
        biases = _create_bias('biases', [32])
        pre_activation = tf.nn.bias_add(conv, biases)
        conv1_1 = tf.nn.relu(pre_activation, name=scope.name)
        # TODO: summary

    # conv2_1
    with tf.variable_scope('conv2_1') as scope:
        kernel = _create_weights(
            'weights',
            shape=[1,1,32,32],
            stddev=2./32,
            wd=0.004
        )
        conv = tf.nn.conv2d(conv1_1, kernel, [1,1,1,1], padding='SAME')
        biases = _create_bias('biases', [32])
        pre_activation = tf.nn.bias_add(conv, biases)
        conv2_1 = tf.nn.relu(pre_activation, name=scope.name)
        # TODO: summary

    # conv3_1
    with tf.variable_scope('conv3_1') as scope:
        kernel = _create_weights(
            'weights',
            shape=[1,1,32,NUM_CLASSES],
            stddev=2./32,
            wd=0.004
        )
        conv = tf.nn.conv2d(conv2_1, kernel, [1,1,1,1], padding='SAME')
        biases = _create_bias('biases', [NUM_CLASSES])
        pre_activation = tf.nn.bias_add(conv, biases)
        conv3_1 = pre_activation # no se le aplica softmax aca
        # TODO: summary

        # NETWORK ENDS HERE

    ### Combining previous layer with network output ###
    # Explained in paper's 4.2 section

    # little classifier
    with tf.variable_scope('little_classifier') as scope:
        kernel = _create_weights(
            'weights',
            shape=[1,1,8,NUM_CLASSES],
            stddev=2./8,
            wd=None
        )
        conv = tf.nn.conv2d(pool3, kernel, [1,1,1,1], padding='SAME')
        biases = _create_bias('biases', [NUM_CLASSES])
        pre_activation = tf.nn.bias_add(conv, biases)
        skip = pre_activation

    # Output + previous layer
    small_out = tf.add(
        tf.image.resize_images(conv3_1, tf.shape(skip)[1:3]), # Bilinear resize
        skip
        )
    ####################################################

    # Bilinear resize
    return tf.image.resize_images(small_out, tf.shape(images)[1:3])

def focal_loss(logits, labels, alpha=[0.75,0.25], gamma=2):
    """Implementation of Focal Loss
    https://arxiv.org/pdf/1708.02002.pdf

    Args:
      logits: Network output
      labels: Expected output
      alpha: vector with alpha coefficients for each class
      gamma: hyperparameter from focal loss

    Returns:
      A 1-D tensor with length equal to batch size, each element represents
      the mean pixel loss from an image
    """

    softmax = tf.nn.softmax(logits)
    # redimension de alpha:
    alpha = tf.tile(
        tf.reshape(alpha,[1,1,1,NUM_CLASSES]),
        tf.concat([tf.shape(labels)[:-1],[1]], 0)
    )
    # retorna un tensor de las mismas dimensiones que retorna la cross entropy
    return tf.reduce_mean(
        tf.multiply(
            tf.multiply(
                -((1-softmax)**gamma),
                tf.log(softmax + 1e-10)), # evita underflow
            tf.multiply(labels, alpha)
        ),
        [1,2,3]
    )

def loss(logits, labels):
    """Calculate loss per batch
    Add summary for "Loss"

    Args:
      logits: Logits from inference()
      labels: Labels from training set

    Returns:
      Loss tensor
    """
    cross_entropy = focal_loss(logits, labels)
    cross_entropy_mean = tf.reduce_mean(cross_entropy, name='cross_entropy')
    tf.add_to_collection('losses', cross_entropy_mean)

    return tf.add_n(tf.get_collection('losses'), name='total_loss')

def _add_loss_sumaries(total_loss):
    """Add summaries for losses in model.
    Generates moving average for all losses and associated summaries for
    visualizing the performance of the network.

    Args:
      total_loss: Total loss from loss().
    Returns:
      loss_averages_op: op for generating moving averages of losses.
    """

    # Compute the moving average of all individual losses and the total loss.
    loss_averages = tf.train.ExponentialMovingAverage(0.9, name='avg')
    losses = tf.get_collection('losses')
    loss_averages_op = loss_averages.apply(losses + [total_loss])
    # Attach a scalar summary to all individual losses and the total loss; do the
    # same for the averaged version of the losses.
    for l in losses + [total_loss]:
        # Name each loss as '(raw)' and name the moving average version of the loss
        # as the original loss name.
        tf.summary.scalar(l.op.name + ' (raw)', l)
        tf.summary.scalar(l.op.name, loss_averages.average(l))
    
    return loss_averages_op

def train(total_loss, global_step):
    """Train model.
    Create an optimizer and apply to all trainable variables. Add moving
    average for all trainable variables.

    Args:
      total_loss: Total loss from loss().
      global_step: Integer Variable counting the number of training steps
      processed.
    Returns:
      train_op: op for training.
    """

    # Generate moving averages of all losses and associated summaries.
    loss_averages_op = _add_loss_sumaries(total_loss)

    # Using Adam optimizer
    with tf.control_dependencies([loss_averages_op]):
        opt = tf.train.AdamOptimizer() # default values
        grads = opt.compute_gradients(total_loss)

    # Apply gradients
    apply_gradient_op = opt.apply_gradients(grads, global_step=global_step)

    # Add histograms for trainable variables.
    for var in tf.trainable_variables():
        tf.summary.histogram(var.op.name, var)

    # Add histograms for gradients.
    for grad, var in grads:
        if grad is not None:
            tf.summary.histogram(var.op.name + '/gradients', grad)

    # Track the moving averages of all trainable variables.
    variable_averages = tf.train.ExponentialMovingAverage(
        MOVING_AVERAGE_DECAY, global_step)
    with tf.control_dependencies([apply_gradient_op]):
        variables_averages_op = variable_averages.apply(tf.trainable_variables())

    return variables_averages_op
